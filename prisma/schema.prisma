// Prisma schema for Client Management System
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  clerkUserId  String   @unique
  email        String   @unique
  name         String?
  imageUrl     String?
  projects     Project[]        @relation("OwnerProjects")
  memberships  ProjectMember[]
  clientContacts ClientContact[] @relation("ClientOwner")
  invitedClientAccesses ClientProjectAccess[] @relation("ClientInviter")
  authoredComments ProjectComment[] @relation("CommentAuthorUser")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Project {
  id             String               @id @default(cuid())
  ownerId        String
  owner          User                 @relation("OwnerProjects", fields: [ownerId], references: [id])
  name           String
  description    String?
  isArchived     Boolean              @default(false)
  members        ProjectMember[]
  updates        Update[]
  shareLink      ShareLink?
  clientAccesses ClientProjectAccess[]
  clientTags     ClientTag[]
  comments       ProjectComment[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  @@index([ownerId, createdAt])
  @@index([isArchived])
}

model ProjectMember {
  id        String  @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
  @@index([userId])
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
}

model Update {
  id         String   @id @default(cuid())
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  title      String
  bodyMd     String
  status     UpdateStatus @default(PUBLISHED)
  tags       String[]
  createdBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  comments   ProjectComment[]

  @@index([projectId, createdAt])
  @@index([status])
}

enum UpdateStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model ShareLink {
  id        String   @id @default(cuid())
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id])
  token     String   @unique
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClientContact {
  id        String   @id @default(cuid())
  email     String
  name      String?
  avatarUrl String?
  ownerId   String?
  owner     User?    @relation("ClientOwner", fields: [ownerId], references: [id])
  access    ClientProjectAccess[]
  comments  ProjectComment[] @relation("CommentAuthorClient")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, email])
  @@index([email])
}

model ClientProjectAccess {
  id           String               @id @default(cuid())
  projectId    String
  project      Project              @relation(fields: [projectId], references: [id])
  clientId     String
  client       ClientContact        @relation(fields: [clientId], references: [id])
  invitedById  String
  invitedBy    User                 @relation("ClientInviter", fields: [invitedById], references: [id])
  role         ClientRole           @default(CLIENT)
  status       ClientStatus         @default(PENDING)
  inviteToken  String?              @unique
  lastViewedAt DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  tags         ClientTagAssignment[]

  @@unique([projectId, clientId])
  @@index([projectId, status])
}

model ClientTag {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  label     String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  assignments ClientTagAssignment[]

  @@unique([projectId, label])
  @@index([projectId])
}

model ClientTagAssignment {
  id        String         @id @default(cuid())
  tagId     String
  tag       ClientTag      @relation(fields: [tagId], references: [id])
  accessId  String
  access    ClientProjectAccess @relation(fields: [accessId], references: [id])
  createdAt DateTime       @default(now())

  @@unique([tagId, accessId])
  @@index([accessId])
}

model ProjectComment {
  id             String            @id @default(cuid())
  projectId      String
  project        Project           @relation(fields: [projectId], references: [id])
  updateId       String?
  update         Update?           @relation(fields: [updateId], references: [id])
  authorUserId   String?
  authorUser     User?             @relation("CommentAuthorUser", fields: [authorUserId], references: [id])
  authorClientId String?
  authorClient   ClientContact?    @relation("CommentAuthorClient", fields: [authorClientId], references: [id])
  parentId       String?
  parent         ProjectComment?   @relation("CommentThread", fields: [parentId], references: [id])
  replies        ProjectComment[]  @relation("CommentThread")
  authorType     CommentAuthorType
  body           String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([projectId, createdAt])
  @@index([updateId])
}

enum ClientRole {
  CLIENT
  INTERNAL
}

enum ClientStatus {
  PENDING
  ACTIVE
  INACTIVE
  REVOKED
}

enum CommentAuthorType {
  CREATOR
  CLIENT
}

model WaitlistEntry {
  id            String          @id @default(cuid())
  email         String          @unique
  fullName      String?
  company       String?
  goals         String?
  source        String?
  notes         String?
  metadata      Json?
  status        WaitlistStatus  @default(PENDING)
  convertedAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  events        WaitlistEvent[]

  @@index([status, createdAt])
  @@index([createdAt])
}

model WaitlistEvent {
  id          String             @id @default(cuid())
  entryId     String
  entry       WaitlistEntry      @relation(fields: [entryId], references: [id], onDelete: Cascade)
  type        WaitlistEventType
  payload     Json?
  notes       String?
  createdAt   DateTime           @default(now())

  @@index([entryId, createdAt])
}

enum WaitlistStatus {
  PENDING
  ENGAGED
  CONVERTED
  OPTED_OUT
}

enum WaitlistEventType {
  STATUS_CHANGE
  NOTE
  COMMUNICATION
  WEBHOOK
}
